[
  {
    "name": "onNavigateCase$",
    "ofType": [
      "NavigateCaseTriggerAction"
    ]
  },
  {
    "name": "onDisplayOverlayFromStore$",
    "ofType": [
      "DisplayOverlayFromStoreAction"
    ],
    "dependencies": [
      "overlays"
    ],
    "action": [
      "DisplayOverlayAction"
    ]
  },
  {
    "name": "onOverlaysMarkupChanged$",
    "ofType": [
      "OverlaysMarkupAction"
    ]
  },
  {
    "name": "onRedrawTimeline$",
    "ofType": [
      "RedrawTimelineAction"
    ]
  },
  {
    "name": "loadOverlays$",
    "ofType": [
      "LoadOverlaysAction"
    ],
    "action": [
      "LoadOverlaysSuccessAction"
    ]
  },
  {
    "name": "onRequestOverlayByID$",
    "ofType": [
      "RequestOverlayByIDFromBackendAction"
    ],
    "action": [
      "DisplayOverlayAction"
    ]
  },
  {
    "name": "initTimelineState$",
    "ofType": [
      "LoadOverlaysAction"
    ],
    "action": [
      "SetTimelineStateAction"
    ]
  },
  {
    "name": "goPrevDisplay$",
    "ofType": [
      "GoPrevDisplayAction"
    ],
    "dependencies": [
      "overlays"
    ],
    "filter": "Exists a previous overlay",
    "action": [
      "DisplayOverlayFromStoreAction"
    ]
  },
  {
    "name": "goNextDisplay$",
    "ofType": [
      "GoNextDisplayAction"
    ],
    "dependencies": [
      "overlays"
    ],
    "filter": "Exists a next overlay",
    "action": [
      "DisplayOverlayFromStoreAction"
    ]
  },
  {
    "name": "displayOverlaySetTimeline$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "dependencies": [
      "overlays",
      "cases"
    ],
    "filter": "isActiveMap && displayedOverlay && displayedOverlay is exeeding timelineState",
    "action": [
      "SetTimelineStateAction"
    ]
  },
  {
    "name": "beginLayerTreeLoad$",
    "ofType": [
      "BeginLayerTreeLoadAction"
    ],
    "dependencies": [
      "layers"
    ],
    "action": [
      "UnselectLayerAction?",
      "LayerTreeLoadedAction?",
      "SelectLayerAction?",
      "ErrorLoadingLayersAction?"
    ]
  },
  {
    "name": "initializeFilters$",
    "ofType": [
      "InitializeFiltersAction"
    ],
    "dependencies": [
      "filters"
    ],
    "action": [
      "InitializeFiltersSuccessAction"
    ]
  },
  {
    "name": "loadCases$",
    "ofType": [
      "LoadCasesAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "LoadCasesSuccessAction"
    ]
  },
  {
    "name": "onAddCase$",
    "ofType": [
      "AddCaseAction"
    ],
    "action": [
      "AddCaseSuccessAction"
    ]
  },
  {
    "name": "onDeleteCase$",
    "ofType": [
      "DeleteCaseAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "LoadDefaultCaseAction?",
      "DeleteCaseBackendAction"
    ]
  },
  {
    "name": "onDeleteCaseBackend$",
    "ofType": [
      "DeleteCaseBackendAction"
    ],
    "action": [
      "DeleteCaseBackendSuccessAction"
    ]
  },
  {
    "name": "onDeleteCaseBackendSuccess$",
    "ofType": [
      "DeleteCaseBackendSuccessAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "state cases length is not larger than the paginationLimit",
    "action": [
      "LoadCasesAction"
    ]
  },
  {
    "name": "onUpdateCase$",
    "ofType": [
      "UpdateCaseAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "Not the default case",
    "action": [
      "UpdateCaseBackendAction"
    ]
  },
  {
    "name": "onUpdateCaseBackend$",
    "ofType": [
      "UpdateCaseBackendAction"
    ],
    "action": [
      "UpdateCaseBackendSuccessAction"
    ]
  },
  {
    "name": "onUpdateCaseBackendSuccess$",
    "ofType": [
      "UpdateCaseBackendSuccessAction"
    ]
  },
  {
    "name": "openModal$",
    "ofType": [
      "OpenModalAction"
    ]
  },
  {
    "name": "closeModal$",
    "ofType": [
      "CloseModalAction"
    ]
  },
  {
    "name": "addCaseSuccess$",
    "ofType": [
      "AddCaseSuccessAction"
    ],
    "action": [
      "SelectCaseByIdAction"
    ]
  },
  {
    "name": "loadCase$",
    "ofType": [
      "LoadCaseAction"
    ],
    "action": [
      "SelectCaseByIdAction?",
      "SelectCaseAction?",
      "LoadDefaultCaseAction?"
    ]
  },
  {
    "name": "loadDefaultCase$",
    "ofType": [
      "LoadDefaultCaseAction"
    ],
    "filter": "Payload does not have context",
    "action": [
      "SelectCaseAction"
    ]
  },
  {
    "name": "loadDefaultCaseContext$",
    "ofType": [
      "LoadDefaultCaseAction"
    ],
    "filter": "Payload does not have context",
    "action": [
      "SelectCaseAction"
    ]
  },
  {
    "name": "onSelectCaseById$",
    "ofType": [
      "SelectCaseByIdAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is a new selected case",
    "action": [
      "SelectCaseAction"
    ]
  },
  {
    "name": "onSaveCaseAs$",
    "ofType": [
      "SaveCaseAsAction"
    ],
    "action": [
      "AddCaseAction"
    ]
  },
  {
    "name": "onSelectMenuItem$",
    "ofType": [
      "SelectMenuItemAction"
    ]
  },
  {
    "name": "onUpdateSize$",
    "ofType": [
      "UpdateMapSizeAction"
    ]
  },
  {
    "name": "onCommunicatorChange$",
    "ofType": [
      "AddMapInstanceAction",
      "RemoveMapInstanceAction",
      "MapInstanceChangedAction"
    ]
  },
  {
    "name": "onStopMapShadowMouse$",
    "ofType": [
      "StopMapShadowAction"
    ]
  },
  {
    "name": "onStartMapShadowMouse$",
    "ofType": [
      "StartMapShadowAction"
    ]
  },
  {
    "name": "onComposeMapShadowMouse$",
    "ofType": [
      "CompositeMapShadowAction"
    ]
  },
  {
    "name": "onToggleImageProcessing$",
    "ofType": [
      "SetMapAutoImageProcessing"
    ],
    "filter": "There is a communicator"
  },
  {
    "name": "onContextMenuShow$",
    "ofType": [
      "ContextMenuShowAction"
    ]
  },
  {
    "name": "onLayoutsChange$",
    "ofType": [
      "SetLayoutAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "maps_count and mapsList length are not equal",
    "action": [
      "SetMapsDataActionStore"
    ]
  },
  {
    "name": "positionChanged$",
    "ofType": [
      "PositionChangedAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is a selected map",
    "action": [
      "SetMapsDataActionStore"
    ]
  },
  {
    "name": "backToWorldView$",
    "ofType": [
      "BackToWorldAction"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "SetMapsDataActionStore"
    ]
  },
  {
    "name": "onMapsDataActiveMapIdChanged$",
    "ofType": [
      "SetMapsDataActionStore"
    ],
    "filter": "There is an activeMapId",
    "action": [
      "ActiveMapChangedAction"
    ]
  },
  {
    "name": "onMapsData1MapsListChanged$",
    "ofType": [
      "SetMapsDataActionStore"
    ],
    "filter": "There is a mapsList",
    "action": [
      "MapsListChangedAction"
    ]
  },
  {
    "name": "pinPointModeTriggerAction$",
    "ofType": [
      "PinPointModeTriggerAction"
    ]
  },
  {
    "name": "pinLocationModeTriggerAction$",
    "ofType": [
      "PinLocationModeTriggerAction"
    ]
  },
  {
    "name": "getFilteredOverlays$",
    "ofType": [
      "ContextMenuGetFilteredOverlaysAction"
    ]
  },
  {
    "name": "updatePinLocationState$",
    "ofType": [
      "SetPinLocationModeAction"
    ],
    "action": [
      "PinLocationModeTriggerAction"
    ]
  },
  {
    "name": "onLayoutsChangeSetMouseShadowEnable$",
    "ofType": [
      "SetLayoutAction"
    ],
    "action": [
      "DisableMouseShadow?",
      "StopMouseShadow?",
      "EnableMouseShadow?"
    ]
  },
  {
    "name": "onUpdateLocationDefaultCase$",
    "ofType": [
      "SetStateAction"
    ],
    "filter": "There is no caseId and no selected case or selected case is not the default case",
    "dependencies": [
      "cases"
    ],
    "action": [
      "LoadDefaultCaseAction"
    ]
  },
  {
    "name": "onUpdateLocationCase$",
    "ofType": [
      "SetStateAction"
    ],
    "filter": "There is a caseId and selected case id is not equal to payload",
    "dependencies": [
      "cases"
    ],
    "action": [
      "LoadCaseAction"
    ]
  },
  {
    "name": "selectCaseUpdateRouter$",
    "ofType": [
      "SelectCaseAction"
    ],
    "dependencies": [
      "router"
    ],
    "filter": "Selected case ID is not the router's or default's case ID",
    "action": [
      "NavigateCaseTriggerAction"
    ]
  },
  {
    "name": "selectDefaultCaseUpdateRouter$",
    "ofType": [
      "SelectCaseAction"
    ],
    "dependencies": [
      "router"
    ],
    "filter": "Selected case is default, and router or query not empty",
    "action": [
      "NavigateCaseTriggerAction"
    ]
  },
  {
    "name": "onMapsDataChange$",
    "ofType": [
      "SetMapsDataActionStore"
    ],
    "dependencies": [
      "cases",
      "map"
    ],
    "action": [
      "UpdateCaseAction"
    ]
  },
  {
    "name": "selectCaseByIdUpdateMapsData$",
    "ofType": [
      "SelectCaseAction"
    ],
    "action": [
      "SetMapsDataActionStore"
    ]
  },
  {
    "name": "onActiveMapChanges$",
    "ofType": [
      "ActiveMapChangedAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is an active map",
    "action": [
      "DisableImageProcessing?",
      "EnableImageProcessing?",
      "SetAutoImageProcessingSuccess?"
    ]
  },
  {
    "name": "onActiveMapChangesSetOverlaysFootprintMode$",
    "ofType": [
      "ActiveMapChangedAction"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "SetActiveOverlaysFootprintModeAction",
      "AnnotationVisualizerAgentAction",
      "AnnotationVisualizerAgentAction"
    ]
  },
  {
    "name": "onShowOverlayFootprint$",
    "ofType": [
      "ShowOverlaysFootprintAction"
    ],
    "action": [
      "SetActiveOverlaysFootprintModeAction"
    ]
  },
  {
    "name": "onDisplayOverlaySuccess$",
    "ofType": [
      "DisplayOverlaySuccessAction"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "EnableImageProcessing",
      "SetMapAutoImageProcessing",
      "SetAutoImageProcessingSuccess"
    ]
  },
  {
    "name": "backToWorldView$",
    "ofType": [
      "BackToWorldAction"
    ],
    "action": [
      "DisableImageProcessing"
    ]
  },
  {
    "name": "onSelectCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "action": [
      "DisableImageProcessing"
    ]
  },
  {
    "name": "toggleAutoImageProcessing$",
    "ofType": [
      "SetAutoImageProcessing"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "SetMapAutoImageProcessing",
      "SetMapsDataActionStore",
      "SetAutoImageProcessingSuccess"
    ]
  },
  {
    "name": "getActiveCenter$",
    "ofType": [
      "PullActiveCenter"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is a map communicator",
    "action": [
      "SetActiveCenter"
    ]
  },
  {
    "name": "updatePinLocationAction$",
    "ofType": [
      "SetPinLocationModeAction"
    ]
  },
  {
    "name": "onGoTo$",
    "ofType": [
      "GoToAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is a map communicator",
    "action": [
      "SetActiveCenter"
    ]
  },
  {
    "name": "updatePinPointSearchAction$",
    "ofType": [
      "UpdateStatusFlagsAction"
    ],
    "dependencies": [
      "status_bar"
    ],
    "filter": "update pinPointSearch and in pinPointSearch"
  },
  {
    "name": "updatePinPointIndicatorAction$",
    "ofType": [
      "UpdateStatusFlagsAction"
    ],
    "dependencies": [
      "status_bar",
      "cases"
    ],
    "filter": "update pinPointIndicator"
  },
  {
    "name": "onCopySelectedCaseLink$",
    "ofType": [
      "CopySelectedCaseLinkAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "CopyCaseLinkAction"
    ]
  },
  {
    "name": "selectCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "filter": "Case is truthy",
    "action": [
      "ChangeLayoutAction",
      "SetOrientationAction",
      "SetGeoFilterAction",
      "SetTimeAction"
    ]
  },
  {
    "name": "statusBarChanges$",
    "ofType": [
      "SetOrientationAction",
      "SetGeoFilterAction",
      "SetTimeAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is a selected case",
    "action": [
      "UpdateCaseAction",
      "LoadOverlaysAction?"
    ]
  },
  {
    "name": "onBackToWorldView$",
    "ofType": [
      "BackToWorldViewAction"
    ],
    "action": [
      "BackToWorldAction"
    ]
  },
  {
    "name": "onFavorite$",
    "ofType": [
      "FavoriteAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is an active map overlay",
    "action": [
      "UpdateCaseAction?",
      "SyncFilteredOverlays",
      "OverlaysMarkupAction",
      "EnableOnlyFavoritesSelectionAction"
    ]
  },
  {
    "name": "onExpand$",
    "ofType": [
      "ExpandAction"
    ]
  },
  {
    "name": "onGoPrevNext$",
    "ofType": [
      "GoNextAction",
      "GoPrevAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is an active map overlay",
    "action": [
      "GoNextDisplayAction?",
      "GoPrevDisplayAction?"
    ]
  },
  {
    "name": "setOverlayCount$",
    "ofType": [
      "UpdateOverlaysCountAction"
    ],
    "action": [
      "SetOverlaysCountAction"
    ]
  },
  {
    "name": "setOverlaysNotFromCase$",
    "ofType": [
      "SetOverlayNotInCaseAction"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "SetOverlayNotInCaseAction"
    ]
  },
  {
    "name": "updatePinPointModeAction$",
    "ofType": [
      "UpdateStatusFlagsAction"
    ],
    "dependencies": [
      "status_bar"
    ],
    "filter": "is action pinPointSearch",
    "action": [
      "PinPointModeTriggerAction"
    ]
  },
  {
    "name": "onOverlaysMarkupsChanged$",
    "ofType": [
      "LoadOverlaysSuccessAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is a selected case",
    "action": [
      "OverlaysMarkupAction"
    ]
  },
  {
    "name": "selectCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "filter": "There is an imagery count and the case is not empty",
    "action": [
      "LoadOverlaysAction"
    ]
  },
  {
    "name": "selectCaseWithImageryCount$",
    "ofType": [
      "SelectCaseAction"
    ],
    "filter": "There is an imagery count and the case is not empty",
    "action": [
      "UpdateCaseAction",
      "SetTimeAction",
      "LoadOverlaysAction"
    ]
  },
  {
    "name": "initTimelineState$",
    "ofType": [
      "LoadOverlaysSuccessAction"
    ],
    "filter": "There is an imagery count",
    "dependencies": [
      "overlays"
    ],
    "action": [
      "SetTimelineStateAction"
    ]
  },
  {
    "name": "displayLatestOverlay$",
    "ofType": [
      "SetFiltersAction"
    ],
    "dependencies": [
      "overlays"
    ],
    "filter": "defaultOverlay is latest and displayedOverlays is not empty",
    "action": [
      "DisplayOverlayFromStoreAction"
    ]
  },
  {
    "name": "onContainerChanged$",
    "ofType": [
      "ContainerChangedTriggerAction"
    ],
    "action": [
      "UpdateMapSizeAction",
      "RedrawTimelineAction"
    ]
  },
  {
    "name": "onGoToExpand$",
    "ofType": [
      "GoToExpandAction"
    ],
    "action": [
      "SetClickOutside"
    ]
  },
  {
    "name": "unselectMenuItem$",
    "ofType": [
      "UnSelectMenuItemAction"
    ],
    "action": [
      "GoToExpandAction"
    ]
  },
  {
    "name": "updateFiltersBadge$",
    "ofType": [
      "InitializeFiltersSuccessAction",
      "UpdateFilterAction",
      "ResetFiltersAction",
      "ToggleOnlyFavoriteAction"
    ],
    "dependencies": [
      "filters"
    ],
    "action": [
      "SetBadgeAction"
    ]
  },
  {
    "name": "onMapSingleClick$",
    "ofType": [
      "MapSingleClickAction"
    ],
    "dependencies": [
      "cases",
      "status_bar"
    ],
    "filter": "In pin point search",
    "action": [
      "UpdateStatusFlagsAction",
      "PinPointTriggerAction"
    ]
  },
  {
    "name": "onPinPointTrigger$",
    "ofType": [
      "PinPointTriggerAction"
    ],
    "dependencies": [
      "cases",
      "status_bar"
    ],
    "action": [
      "UpdateCaseAction",
      "LoadOverlaysAction"
    ]
  },
  {
    "name": "onMapSingleClickPinLocation$",
    "ofType": [
      "MapSingleClickAction"
    ],
    "dependencies": [
      "tools"
    ],
    "filter": "In pin location mode",
    "action": [
      "SetPinLocationModeAction",
      "SetActiveCenter"
    ]
  },
  {
    "name": "onStartMapShadow$",
    "ofType": [
      "StartMouseShadow"
    ],
    "action": [
      "StartMapShadowAction"
    ]
  },
  {
    "name": "onEndMapShadow$",
    "ofType": [
      "StopMouseShadow"
    ],
    "action": [
      "StopMapShadowAction"
    ]
  },
  {
    "name": "onDisplayOverlay$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is a full overlay",
    "action": [
      "DisplayOverlayFailedAction?",
      "DisplayOverlaySuccessAction?"
    ]
  },
  {
    "name": "displayOverlayOnNewMapInstance$",
    "ofType": [
      "AddMapInstanceAction",
      "MapInstanceChangedAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "There is mapsList, and it has a an overlay with id from payload",
    "action": [
      "DisplayOverlayAction"
    ]
  },
  {
    "name": "displayOverlayFromCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "dependencies": [
      "map"
    ]
  },
  {
    "name": "displayOverlayFromCase$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "action": [
      "AddOverlayToLoadingOverlaysAction"
    ]
  },
  {
    "name": "onOverlayFromURL$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "filter": "There is no full overlay",
    "action": [
      "RequestOverlayByIDFromBackendAction"
    ]
  },
  {
    "name": "overlayLoadingSuccess$",
    "ofType": [
      "DisplayOverlaySuccessAction"
    ],
    "action": [
      "RemoveOverlayFromLoadingOverlaysAction"
    ]
  },
  {
    "name": "overlayLoadingFailed$",
    "ofType": [
      "DisplayOverlayFailedAction"
    ],
    "action": [
      "SetToastMessageStoreAction",
      "RemoveOverlayFromLoadingOverlaysAction"
    ]
  },
  {
    "name": "addVectorLayer$",
    "ofType": [
      "SelectLayerAction"
    ],
    "dependencies": [
      "cases"
    ]
  },
  {
    "name": "removeVectorLayer$",
    "ofType": [
      "UnselectLayerAction"
    ],
    "dependencies": [
      "cases"
    ]
  },
  {
    "name": "onCommunicatorChange$",
    "ofType": [
      "AddMapInstanceAction",
      "RemoveMapInstanceAction",
      "MapInstanceChangedAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "There is at least one communicator, and exact length of maps",
    "action": [
      "CompositeMapShadowAction",
      "AnnotationVisualizerAgentAction"
    ]
  },
  {
    "name": "onAddCommunicatorShowPinPoint$",
    "ofType": [
      "AddMapInstanceAction",
      "MapInstanceChangedAction"
    ],
    "dependencies": [
      "cases",
      "status_bar"
    ],
    "filter": "There is a pinPointIndicator or pinPointSearch"
  },
  {
    "name": "onAddCommunicatorInitPlugin$",
    "ofType": [
      "AddMapInstanceAction",
      "MapInstanceChangedAction"
    ]
  },
  {
    "name": "onSelectCaseByIdAddPinPointIndicator$",
    "ofType": [
      "SelectCaseAction"
    ],
    "dependencies": [
      "cases",
      "status_bar"
    ],
    "filter": "There is a pinPointIndicator or pinPointSearch"
  },
  {
    "name": "onSynchronizeAppMaps$",
    "ofType": [
      "SynchronizeMapsAction"
    ],
    "dependencies": [
      "cases"
    ]
  },
  {
    "name": "activeMapGeoRegistrationChanged$$",
    "ofType": [
      "DisplayOverlaySuccessAction",
      "ActiveMapChangedAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "mapsList.length > 0",
    "action": [
      "EnableMapGeoOptionsActionStore"
    ]
  },
  {
    "name": "backToWorldGeoRegistration$",
    "ofType": [
      "BackToWorldAction"
    ],
    "dependencies": [
      "map"
    ],
    "filter": "Exists a communicator for the mapId"
  },
  {
    "name": "changeMapGeoOptionsMode$",
    "ofType": [
      "EnableMapGeoOptionsActionStore"
    ],
    "action": [
      "SetMapGeoEnabledModeToolsActionStore",
      "SetMapGeoEnabledModeStatusBarActionStore"
    ]
  },
  {
    "name": "onLayoutChange$",
    "ofType": [
      "ChangeLayoutAction"
    ],
    "dependencies": [
      "cases",
      "status_bar"
    ],
    "action": [
      "UpdateCaseAction?",
      "SetLayoutAction"
    ]
  },
  {
    "name": "setOverlaysNotInCase$",
    "ofType": [
      "SetFiltersAction",
      "SetMapsDataActionStore"
    ],
    "dependencies": [
      "overlays",
      "map"
    ],
    "action": [
      "SetOverlayNotInCaseAction"
    ]
  },
  {
    "name": "markupOnMapsDataChanges$",
    "ofType": [
      "ActiveMapChangedAction",
      "MapsListChangedAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "OverlaysMarkupAction"
    ]
  },
  {
    "name": "onHoverFeatureSetMarkup$",
    "ofType": [
      "HoverFeatureTriggerAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "OverlaysMarkupAction"
    ]
  },
  {
    "name": "onMouseOverDropAction$",
    "ofType": [
      "MouseOverDropAction",
      "MouseOutDropAction"
    ],
    "action": [
      "HoverFeatureTriggerAction"
    ]
  },
  {
    "name": "onHoverFeatureEmitSyncHoverFeature$",
    "ofType": [
      "HoverFeatureTriggerAction"
    ]
  },
  {
    "name": "onDbclickFeaturePolylineDisplayAction$",
    "ofType": [
      "DbclickFeatureTriggerAction"
    ],
    "filter": "TODO",
    "action": [
      "DisplayOverlayFromStoreAction"
    ]
  },
  {
    "name": "markupVisualizer$",
    "ofType": [
      "OverlaysMarkupAction"
    ]
  },
  {
    "name": "updateCaseFromTools$",
    "ofType": [
      "ShowOverlaysFootprintAction"
    ],
    "dependencies": [
      "map"
    ],
    "action": [
      "SetMapsDataActionStore",
      "DrawOverlaysOnMapTriggerAction"
    ]
  },
  {
    "name": "shouldDrawOverlaysOnMap$",
    "ofType": [
      "SetFiltersAction",
      "MapInstanceChangedAction"
    ],
    "action": [
      "DrawOverlaysOnMapTriggerAction"
    ]
  },
  {
    "name": "drawOverlaysOnMap$",
    "ofType": [
      "DrawOverlaysOnMapTriggerAction"
    ],
    "dependencies": [
      "overlays",
      "cases"
    ]
  },
  {
    "name": "gotoIconVisibilityOnGoToWindowChanged$",
    "ofType": [
      "GoToExpandAction"
    ],
    "dependencies": [
      "tools",
      "map"
    ]
  },
  {
    "name": "OnGoToInputChanged$",
    "ofType": [
      "GoToInputChangeAction"
    ],
    "dependencies": [
      "map"
    ]
  },
  {
    "name": "annotationVisualizerAgent$",
    "ofType": [
      "AnnotationVisualizerAgentAction"
    ],
    "dependencies": [
      "cases"
    ],
    "action": [
      "UpdateCaseAction?"
    ]
  },
  {
    "name": "setContextFilter$",
    "ofType": [
      "ContextMenuShowAction"
    ],
    "dependencies": [
      "overlays"
    ],
    "action": [
      "ContextMenuGetFilteredOverlaysAction"
    ]
  },
  {
    "name": "onContextMenuDisplayAction$",
    "ofType": [
      "ContextMenuDisplayAction"
    ],
    "action": [
      "DisplayOverlayFromStoreAction"
    ]
  },
  {
    "name": "selectCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "filter": "The selected case is not empty",
    "action": [
      "BeginLayerTreeLoadAction"
    ]
  },
  {
    "name": "onLoadContexts$",
    "ofType": [
      "InitializeFiltersSuccessAction",
      "UpdateFilterAction",
      "ResetFiltersAction",
      "ToggleOnlyFavoriteAction",
      "SyncFilteredOverlays"
    ],
    "action": [
      "SetFiltersAction"
    ],
    "dependencies": [
      "filters",
      "cases"
    ]
  },
  {
    "name": "updateCaseFacets$",
    "ofType": [
      "InitializeFiltersSuccessAction",
      "UpdateFilterAction",
      "ResetFiltersAction",
      "ToggleOnlyFavoriteAction",
      "SyncFilteredOverlays"
    ],
    "action": [
      "UpdateCaseAction"
    ],
    "dependencies": [
      "filters",
      "cases"
    ]
  },
  {
    "name": "initializeFilters$",
    "ofType": [
      "LoadOverlaysSuccessAction"
    ],
    "dependencies": [
      "cases",
      "overlays"
    ],
    "action": [
      "InitializeFiltersAction"
    ]
  },
  {
    "name": "resetFilters$",
    "ofType": [
      "LoadOverlaysAction"
    ],
    "action": [
      "ResetFiltersAction"
    ]
  },
  {
    "name": "displayEntityFromCase$",
    "ofType": [
      "SelectCaseAction"
    ],
    "filter": "case has contextEntities"
  },
  {
    "name": "displayEntityFromNewMap$",
    "ofType": [
      "AddMapInstanceAction",
      "MapInstanceChangedAction"
    ],
    "dependencies": [
      "cases",
      "map"
    ],
    "filter": "selected case has contextEntities"
  },
  {
    "name": "displayEntityFromNewMap$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "dependencies": [
      "cases",
      "map"
    ],
    "filter": "selected case has contextEntities"
  },
  {
    "name": "displayEntityTimeFromBackToWorld$",
    "ofType": [
      "BackToWorldAction"
    ],
    "dependencies": [
      "cases"
    ],
    "filter": "selected case has contextEntities"
  },
  {
    "name": "setShowFavoritesFlagOnFilters$",
    "ofType": [
      "SelectCaseAction"
    ],
    "action": [
      "EnableOnlyFavoritesSelectionAction"
    ]
  },
  {
    "name": "onDisplayOverlay$",
    "ofType": [
      "DisplayOverlayAction"
    ],
    "action": [
      "SetMapsDataActionStore"
    ],
    "dependencies": [
      "map"
    ]
  },
  {
    "name": "onCopyShareCaseLink$",
    "ofType": [
      "CopyCaseLinkAction"
    ],
    "action": [
      "SetToastMessageStoreAction"
    ],
    "dependencies": [
      "cases"
    ]
  },
  {
    "name": "onOpenShareLink$",
    "ofType": [
      "OpenShareLink"
    ],
    "dependencies": [
      "cases"
    ]
  },
  {
    "name": "onLoadContexts$",
    "ofType": [
      "LoadContextsAction"
    ],
    "action": [
      "LoadContextsSuccessAction"
    ],
    "dependencies": [
      "cases"
    ]
  }
]